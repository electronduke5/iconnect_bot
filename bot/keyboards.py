from aiogram import types

def get_main_keyboard():
    """
    –°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
    """
    return types.ReplyKeyboardMarkup(
        keyboard=[
            [
                types.KeyboardButton(text="/categories"),
                types.KeyboardButton(text="/products")
            ],
            [
                types.KeyboardButton(text="/help")
            ]
        ],
        resize_keyboard=True
    )

def get_admin_keyboard():
    """
    –°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
    """
    return types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="–°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
                    callback_data="create_category_btn"
                )
            ],
            [
                types.InlineKeyboardButton(
                    text="–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç",
                    callback_data="create_product_btn"
                )
            ]
        ]
    )

def get_sale_price_keyboard():
    """
    –°–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å".
    """
    return types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
                    callback_data="skip_sale_price"
                )
            ]
        ]
    )

def get_conditions_keyboard(conditions):
    """
    –°–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π.
    """
    buttons = [
        types.InlineKeyboardButton(text=cond['name'], callback_data=f"condition_{cond['id']}")
        for cond in conditions
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=1, inline_keyboard=[buttons])
    return keyboard

def get_categories_keyboard(categories):
    """
    –°–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.
    """
    buttons = [
        types.InlineKeyboardButton(text=cat['name'], callback_data=f"category_{cat['id']}")
        for cat in categories
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=1, inline_keyboard=[buttons])
    return keyboard

def get_yes_no_keyboard(callback_prefix):
    """
    –°–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–î–∞" –∏ "–ù–µ—Ç".
    """
    return types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="–î–∞",
                    callback_data=f"{callback_prefix}_yes"
                ),
                types.InlineKeyboardButton(
                    text="–ù–µ—Ç",
                    callback_data=f"{callback_prefix}_no"
                )
            ]
        ]
    )

def get_brands_keyboard(brands):
    """
    –°–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞ –±—Ä–µ–Ω–¥–æ–≤.
    """
    buttons = [
        types.InlineKeyboardButton(text=brand['name'], callback_data=f"brand_{brand['id']}")
        for brand in brands
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=2, inline_keyboard=[buttons[i:i+2] for i in range(0, len(buttons), 2)])
    return keyboard

def get_models_keyboard(models):
    """
    –°–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±—Ä–µ–Ω–¥–∞.
    """
    buttons = [
        types.InlineKeyboardButton(text=model['name'], callback_data=f"model_{model['id']}")
        for model in models
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=1, inline_keyboard=[[button] for button in buttons])
    return keyboard

def get_colors_keyboard_from_db(colors):
    """
    –°–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞ —Ü–≤–µ—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    """
    buttons = [
        types.InlineKeyboardButton(text=color['name'], callback_data=f"color_{color['id']}")
        for color in colors
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=3, inline_keyboard=[buttons[i:i+3] for i in range(0, len(buttons), 3)])
    return keyboard

def get_storage_keyboard(storage_capacities):
    """
    –°–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–±—ä–µ–º–æ–≤ –ø–∞–º—è—Ç–∏.
    """
    buttons = [
        types.InlineKeyboardButton(text=f"{storage['capacity_gb']} –ì–ë", callback_data=f"storage_{storage['id']}")
        for storage in storage_capacities
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=3, inline_keyboard=[buttons[i:i+3] for i in range(0, len(buttons), 3)])
    return keyboard

def get_markets_keyboard(markets):
    """
    –°–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä—ã–Ω–∫–æ–≤.
    """
    buttons = [
        types.InlineKeyboardButton(text=market['name'], callback_data=f"market_{market['id']}")
        for market in markets
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=2, inline_keyboard=[buttons[i:i+2] for i in range(0, len(buttons), 2)])
    return keyboard

def get_skip_keyboard(callback_data):
    """
    –°–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å".
    """
    return types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
                    callback_data=callback_data
                )
            ]
        ]
    )

def get_menu_keyboard():
    """
    –°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é.
    """
    return types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="üì¶ –¢–æ–≤–∞—Ä—ã",
                    callback_data="products_submenu"
                ),
                types.InlineKeyboardButton(
                    text="üì± –¢–µ–ª–µ—Ñ–æ–Ω—ã",
                    callback_data="phones_submenu"
                )
            ],
            [
                types.InlineKeyboardButton(
                    text="üí∞ –ü—Ä–∏–±—ã–ª—å",
                    callback_data="menu_profit"
                ),
                types.InlineKeyboardButton(
                    text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                    callback_data="menu_stats"
                )
            ]
        ]
    )

def get_item_navigation_keyboard(item_type, current_index, total_count, item_id=None, is_admin=False):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ç–æ–≤–∞—Ä–∞–º/—Ç–µ–ª–µ—Ñ–æ–Ω–∞–º.
    item_type: 'products' –∏–ª–∏ 'phones'
    current_index: —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å —Ç–æ–≤–∞—Ä–∞ (0-based)
    total_count: –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
    item_id: ID —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    is_admin: True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    """
    keyboard = []
    
    # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é
    keyboard.append([
        types.InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
            callback_data="back_to_menu"
        )
    ])
    
    # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞: –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä/—Ç–µ–ª–µ—Ñ–æ–Ω (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    if is_admin:
        add_text = "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω" if item_type == "phones" else "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä"
        add_callback = "add_phone_from_menu" if item_type == "phones" else "add_product_from_menu"
        keyboard.append([
            types.InlineKeyboardButton(
                text=add_text,
                callback_data=add_callback
            )
        ])
    
    # –¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞: –î–µ–π—Å—Ç–≤–∏—è —Å —Ç–æ–≤–∞—Ä–æ–º (–µ—Å–ª–∏ –µ—Å—Ç—å item_id –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω)
    if item_id and is_admin:
        keyboard.append([
            types.InlineKeyboardButton(
                text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä",
                callback_data=f"edit_item:{item_type}:{item_id}"
            ),
            types.InlineKeyboardButton(
                text="üí∞ –ü—Ä–æ–¥–∞—Ç—å —Ç–æ–≤–∞—Ä",
                callback_data=f"sell_item:{item_type}:{item_id}"
            )
        ])
    
    # –ß–µ—Ç–≤–µ—Ä—Ç–∞—è —Å—Ç—Ä–æ–∫–∞: –ù–∞–≤–∏–≥–∞—Ü–∏—è –≤–ª–µ–≤–æ/–≤–ø—Ä–∞–≤–æ (–µ—Å–ª–∏ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞)
    if total_count > 1:
        nav_buttons = []
        
        # –ö–Ω–æ–ø–∫–∞ "–ø—Ä–µ–¥—ã–¥—É—â–∏–π" (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–≤—ã–π)
        if current_index > 0:
            nav_buttons.append(
                types.InlineKeyboardButton(
                    text="‚óÄÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π",
                    callback_data=f"nav_{item_type}:{current_index - 1}"
                )
            )
        
        # –ö–Ω–æ–ø–∫–∞ "—Å–ª–µ–¥—É—é—â–∏–π" (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π)
        if current_index < total_count - 1:
            nav_buttons.append(
                types.InlineKeyboardButton(
                    text="–°–ª–µ–¥—É—é—â–∏–π ‚ñ∂Ô∏è",
                    callback_data=f"nav_{item_type}:{current_index + 1}"
                )
            )
        
        if nav_buttons:
            keyboard.append(nav_buttons)
    
    return types.InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_back_to_menu_keyboard():
    """
    –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é.
    """
    return types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
                    callback_data="back_to_menu"
                )
            ]
        ]
    )

def get_success_menu_keyboard(item_type):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞/—Ç–µ–ª–µ—Ñ–æ–Ω–∞.
    item_type: 'product' –∏–ª–∏ 'phone'
    """
    add_text = "‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ç–µ–ª–µ—Ñ–æ–Ω" if item_type == "phone" else "‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ç–æ–≤–∞—Ä"
    add_callback = "add_another_phone" if item_type == "phone" else "add_another_product"
    
    return types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="üè™ –ú–µ–Ω—é",
                    callback_data="back_to_menu"
                )
            ],
            [
                types.InlineKeyboardButton(
                    text=add_text,
                    callback_data=add_callback
                )
            ]
        ]
    )

def get_products_submenu_keyboard(is_admin=False):
    """
    –°–æ–∑–¥–∞–µ—Ç –ø–æ–¥–º–µ–Ω—é –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤.
    """
    keyboard = [
        [
            types.InlineKeyboardButton(
                text="üì¶ –¢–æ–≤–∞—Ä—ã –≤ –Ω–∞–ª–∏—á–∏–∏",
                callback_data="products_available"
            )
        ],
        [
            types.InlineKeyboardButton(
                text="üí∞ –ü—Ä–æ–¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã",
                callback_data="products_sold"
            )
        ]
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    if is_admin:
        keyboard.append([
            types.InlineKeyboardButton(
                text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä",
                callback_data="add_product_from_menu"
            )
        ])
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    keyboard.append([
        types.InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
            callback_data="back_to_menu"
        )
    ])
    
    return types.InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_phones_submenu_keyboard(is_admin=False):
    """
    –°–æ–∑–¥–∞–µ—Ç –ø–æ–¥–º–µ–Ω—é –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤.
    """
    keyboard = [
        [
            types.InlineKeyboardButton(
                text="üì± –¢–µ–ª–µ—Ñ–æ–Ω—ã –≤ –Ω–∞–ª–∏—á–∏–∏",
                callback_data="phones_available"
            )
        ],
        [
            types.InlineKeyboardButton(
                text="üí∞ –ü—Ä–æ–¥–∞–Ω–Ω—ã–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã",
                callback_data="phones_sold"
            )
        ]
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    if is_admin:
        keyboard.append([
            types.InlineKeyboardButton(
                text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω",
                callback_data="add_phone_from_menu"
            )
        ])
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    keyboard.append([
        types.InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
            callback_data="back_to_menu"
        )
    ])
    
    return types.InlineKeyboardMarkup(inline_keyboard=keyboard)